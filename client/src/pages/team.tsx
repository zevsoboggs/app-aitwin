import { useState, useMemo } from "react";
import { useQuery } from "@tanstack/react-query";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  Loader2,
  UserCircle,
  Clock,
  BadgeDollarSign,
  Users,
  Filter,
  UserCog,
  Book,
} from "lucide-react";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useAuth } from "@/contexts/AuthContext";
import { User, ReferralTransaction } from "@shared/schema";
import { useToast } from "@/hooks/use-toast";
import { useToastContext } from "@/contexts/ToastContext";
import {
  Dialog,
  DialogContent,
  DialogTitle,
  DialogDescription,
  DialogHeader,
  DialogFooter,
} from "@/components/ui/dialog";
import { UserForm } from "@/components/team/UserForm";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";

import { TruncatedText } from "@/components/ui/truncated-text";
import { useMediaQuery } from "@/hooks/use-media-query";
import MobileTeamPage from "@/components/team/MobileTeamPage";
import TeamInstructionsDialog from "@/components/team/team-instructions-dialog";

export default function TeamPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const { showSuccessToast, showErrorToast } = useToastContext();
  const [activeTab, setActiveTab] = useState("referrals");
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [userDialogOpen, setUserDialogOpen] = useState(false);
  const [filterDialogOpen, setFilterDialogOpen] = useState(false);
  const [instructionsDialogOpen, setInstructionsDialogOpen] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
  const isDesktop = useMediaQuery("(min-width: 1024px)");
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–æ–∫
  const [mobileActiveTab, setMobileActiveTab] = useState<string>("referrals");

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const [nameFilter, setNameFilter] = useState("");
  const [emailFilter, setEmailFilter] = useState("");
  const [roleFilter, setRoleFilter] = useState("");
  const [planFilter, setPlanFilter] = useState("");

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const { data: referrals, isLoading: isReferralsLoading } = useQuery<User[]>({
    queryKey: ["/api/users/referrer", user?.id],
    queryFn: () =>
      apiRequest({
        url: `/api/users/referrer/${user?.id}`,
        method: "GET",
      }),
    enabled: !!user?.id,
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  const { data: referralTransactions, isLoading: isTransactionsLoading } =
    useQuery<ReferralTransaction[]>({
      queryKey: ["/api/transactions/referrer", user?.id],
      queryFn: () =>
        apiRequest({
          url: `/api/transactions/referrer/${user?.id}`,
          method: "GET",
        }),
      enabled: !!user?.id,
    });

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–∞—Ö
  const { data: allClientsData } = useQuery<User[]>({
    queryKey: ["/api/users/all-clients"],
    queryFn: () =>
      apiRequest({
        url: "/api/users/all-clients",
        method: "GET",
      }),
    enabled: !!user?.id,
    retry: (failureCount, error) => {
      // –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º 403, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
      if (error && (error as any).status === 403) {
        return false;
      }
      return failureCount < 3;
    },
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const {
    data: managedUsers,
    isLoading: isManagedUsersLoading,
    refetch: refetchManagedUsers,
  } = useQuery<User[]>({
    queryKey: ["/api/users/manager", user?.id],
    queryFn: () =>
      apiRequest({
        url: `/api/users/manager/${user?.id}`,
        method: "GET",
      }),
    enabled:
      !!user?.id &&
      (user?.role === "manager" || user?.role === "admin") &&
      activeTab === "managed",
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
  const { data: usersWithoutManager, isLoading: isUsersWithoutManagerLoading } =
    useQuery<User[]>({
      queryKey: ["/api/users/without-manager"],
      queryFn: () =>
        apiRequest({
          url: "/api/users/without-manager",
          method: "GET",
        }),
      enabled:
        !!user?.id &&
        (user?.role === "manager" || user?.role === "admin") &&
        activeTab === "managed",
    });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
  const { data: allUsers, isLoading: isAllUsersLoading } = useQuery<User[]>({
    queryKey: ["/api/users"],
    queryFn: () =>
      apiRequest({
        url: "/api/users",
        method: "GET",
      }),
    enabled: !!user?.id && user?.role === "admin" && activeTab === "all-users",
  });

  // –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
  const { data: commission } = useQuery<{ totalCommission: number }>({
    queryKey: ["/api/commission", user?.id, "referrer"],
    queryFn: () =>
      apiRequest({
        url: `/api/commission/${user?.id}/referrer`,
        method: "GET",
      }),
    enabled:
      !!user?.id &&
      (user?.role === "referral" ||
        user?.role === "admin" ||
        user?.role === "manager" ||
        user?.role === "user"),
  });

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  const { data: managersData, isLoading: isManagersLoading } = useQuery<User[]>(
    {
      queryKey: ["/api/users/role/manager"],
      queryFn: () =>
        apiRequest({
          url: "/api/users/role/manager",
          method: "GET",
        }),
      enabled:
        !!user?.id &&
        (activeTab === "managed" ||
          activeTab === "referrals" ||
          activeTab === "all-users"),
    }
  );

  // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –≤–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–∞)
  // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä—É –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–µ–±—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —Å–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  const managers = useMemo(() => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    if (!user || !managersData) return [];

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    const allManagers = [...managersData];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const isUserReferrerForDisplayedUsers = !!referrals?.length;

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ä–µ—Ñ–µ—Ä—Ä–µ—Ä–æ–º –∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    if (
      isUserReferrerForDisplayedUsers &&
      !allManagers.some((m) => m.id === user.id)
    ) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
      allManagers.push({
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        phone: user.phone ?? null,
        // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏, —Ç—Ä–µ–±—É–µ–º—ã–º–∏ —Ç–∏–ø–æ–º
        password: null,
        status: "active",
        createdAt: new Date(),
        lastLogin: null,
        plan: null,
        referrerId: null,
        managerId: null,
        totalSpent: null,
        referralCode: user.referralCode || "",
        balance: 0,
        referralCommission: 0,
        trialUsed: false, // üÜï –¥–æ–±–∞–≤–ª–µ–Ω–æ
        trialEndDate: null,
      });
    }

    return allManagers;
  }, [user, managersData, referrals]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
  const formatDate = (dateString: string | Date) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat("ru-RU", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    }).format(date);
  };

  // –î–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const canAccessManaged = user?.role === "manager" || user?.role === "admin";
  const canAccessAllUsers = user?.role === "admin";
  const canAccessPayments = true; // –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫ –≤–∫–ª–∞–¥–∫–µ –ø–ª–∞—Ç–µ–∂–µ–π

  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUpdateUserManager = async (
    userId: number,
    currentManagerId: number | null,
    selectedManagerId?: number | null
  ) => {
    if (!user) return;

    try {
      console.log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
      console.log(
        `–¢–µ–∫—É—â–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä: ${currentManagerId}, –í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: ${selectedManagerId}`
      );

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID, –∏–ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let newManagerId: number | null;

      if (selectedManagerId !== undefined) {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        newManagerId = selectedManagerId;
        console.log(`–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${newManagerId}`);
      } else {
        // –ò–Ω–∞—á–µ –ª–æ–≥–∏–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–±–∏—Ä–∞–µ–º –µ–≥–æ
        // –∏–Ω–∞—á–µ - –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        newManagerId = currentManagerId === user.id ? null : user.id;
        console.log(
          `–ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${newManagerId}`
        );
      }

      console.log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ${newManagerId}`);

      const response = await apiRequest({
        url: `/api/users/${userId}/manager`,
        method: "PUT",
        body: { managerId: newManagerId },
        headers: { "Content-Type": "application/json" },
      });

      console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);

      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      queryClient.invalidateQueries({ queryKey: ["/api/users/manager"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users/referrer"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users"] });
      queryClient.invalidateQueries({
        queryKey: ["/api/users/without-manager"],
      });
      queryClient.invalidateQueries({ queryKey: ["/api/users/all-clients"] });

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ—Å—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç
      showSuccessToast(
        newManagerId
          ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ"
          : "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        newManagerId
          ? "–í—ã —Å—Ç–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          : "–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );

      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–∫–∂–µ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
      toast({
        title: newManagerId
          ? "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ"
          : "–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        description: newManagerId
          ? "–í—ã —Å—Ç–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          : "–í—ã –±–æ–ª—å—à–µ –Ω–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      });
    } catch (error) {
      console.error("Error updating user manager:", error);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—Å—Ç–æ–≤ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      showErrorToast(
        "–û—à–∏–±–∫–∞",
        error instanceof Error
          ? error.message
          : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );

      toast({
        title: "–û—à–∏–±–∫–∞",
        description:
          error instanceof Error
            ? error.message
            : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        variant: "destructive",
      });
    }
  };

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleEditUser = (userToEdit: User) => {
    setEditingUser(userToEdit);
    setUserDialogOpen(true);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleCloseUserDialog = () => {
    setEditingUser(null);
    setUserDialogOpen(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const getFilteredUsers = () => {
    if (!allUsers) return [];

    return [...allUsers]
      .sort(
        (a, b) =>
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      )
      .filter((userItem) => {
        const passesNameFilter =
          !nameFilter ||
          (userItem.name?.toLowerCase().includes(nameFilter.toLowerCase()) ??
            false);

        const passesEmailFilter =
          !emailFilter ||
          userItem.email?.toLowerCase().includes(emailFilter.toLowerCase());

        const passesRoleFilter =
          !roleFilter || roleFilter === "all" || userItem.role === roleFilter;

        const passesPlanFilter =
          !planFilter || planFilter === "all" || userItem.plan === planFilter;

        // –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return (
          passesNameFilter &&
          passesEmailFilter &&
          passesRoleFilter &&
          passesPlanFilter
        );
      });
  };

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetFilters = () => {
    setNameFilter("");
    setEmailFilter("");
    setRoleFilter("");
    setPlanFilter("");
    setFilterDialogOpen(false);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleUserFormSubmit = async (data: any) => {
    if (!editingUser) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!data.email && !data.phone) {
      toast({
        title: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è",
        description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        variant: "destructive",
      });
      return;
    }

    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
      await apiRequest({
        url: `/api/users/${editingUser.id}`,
        method: "PUT",
        body: data,
        headers: { "Content-Type": "application/json" },
      });

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      setUserDialogOpen(false);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
      queryClient.invalidateQueries({ queryKey: ["/api/users"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users/manager"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users/referrer"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users/all-clients"] });

      // –ï—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è —Ç–∞—Ä–∏—Ñ, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª–∏–º–∏—Ç–∞—Ö –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      if (data.plan && data.plan !== editingUser.plan) {
        queryClient.invalidateQueries({ queryKey: ["/api/auth/me"] });
        queryClient.invalidateQueries({ queryKey: ["/api/usage"] });
        queryClient.invalidateQueries({ queryKey: ["/api/limits"] });
        queryClient.invalidateQueries({ queryKey: ["/api/user-plan-usage"] });
      }

      toast({
        title: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω",
        description: "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
      });
    } catch (error: any) {
      console.error("Error updating user:", error);

      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const message =
        error?.response?.data?.message ||
        error?.message ||
        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è";

      toast({
        title: "–û—à–∏–±–∫–∞",
        description: message,
        variant: "destructive",
      });
    }
  };

  function getRusPlan(plan: string | null) {
    if (plan === "free") return "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π";
    if (plan === "basic") return "–ë–∞–∑–æ–≤—ã–π";
    if (plan === "standart") return "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π";
    if (plan === "enterprise") return "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π";
  }

  function getRusRole(role: string | null) {
    if (role === "admin") return "–ê–¥–º–∏–Ω";
    if (role === "manager") return "–ú–µ–Ω–µ–¥–∂–µ—Ä";
    if (role === "user") return "–ö–ª–∏–µ–Ω—Ç";
    if (role === "referral") return "–†–µ—Ñ–µ—Ä–∞–ª";
  }

  return (
    <div className="container mx-auto py-8">
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-8">
        <div className="flex items-center space-x-3">
          <div>
            <h1 className="text-3xl font-bold">–ú–æ—è –∫–æ–º–∞–Ω–¥–∞</h1>
            <p className="text-slate-500 mt-1">
              –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –∏ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è–º–∏
            </p>
          </div>
          <Button
            variant="outline"
            size="icon"
            onClick={() => setInstructionsDialogOpen(true)}
            title="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π"
            className="bg-purple-200 hover:bg-purple-300"
          >
            <Book className="h-5 w-5" />
          </Button>
        </div>

        {commission && (
          <Card className="md:w-64 mt-4 md:mt-0">
            <CardContent className="p-4">
              <div className="flex items-center space-x-4">
                <BadgeDollarSign className="w-8 h-8 text-green-500" />
                <div>
                  <p className="text-sm text-slate-500">–û–±—â–µ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ</p>
                  <p className="text-2xl font-bold">
                    {(commission.totalCommission / 100).toFixed(2)} ‚ÇΩ
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–∞–±–∞–º–∏ - —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      <div className={isDesktop ? "block" : "hidden"}>
        <Tabs defaultValue="referrals" onValueChange={handleTabChange}>
          <TabsList className="grid w-full grid-cols-2 md:grid-cols-4">
            <TabsTrigger value="referrals">–†–µ—Ñ–µ—Ä–∞–ª—ã</TabsTrigger>
            <TabsTrigger value="payments">–í—ã–ø–ª–∞—Ç—ã</TabsTrigger>
            {canAccessManaged && (
              <TabsTrigger value="managed">–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ</TabsTrigger>
            )}
            {canAccessAllUsers && (
              <TabsTrigger value="all-users">–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</TabsTrigger>
            )}
          </TabsList>

          {/* –í–∫–ª–∞–¥–∫–∞ –†–µ—Ñ–µ—Ä–∞–ª—ã */}
          <TabsContent value="referrals" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>–ú–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</CardTitle>
                <CardDescription>
                  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isReferralsLoading ? (
                  <div className="py-8 flex justify-center">
                    <Loader2 className="w-8 h-8 animate-spin" />
                  </div>
                ) : referrals && referrals.length > 0 ? (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                        <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</TableHead>
                        <TableHead>–ú–µ–Ω–µ–¥–∂–µ—Ä</TableHead>
                        <TableHead className="text-right">
                          –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
                        </TableHead>
                        <TableHead>–í—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {[...referrals]
                        .sort(
                          (a, b) =>
                            new Date(b.createdAt).getTime() -
                            new Date(a.createdAt).getTime()
                        )
                        .map((referral) => (
                          <TableRow key={referral.id}>
                            <TableCell className="font-medium">
                              <div className="flex items-center space-x-2">
                                <UserCircle className="w-5 h-5 text-slate-400" />
                                <TruncatedText
                                  text={referral.name || referral.email}
                                  maxLength={20}
                                />
                              </div>
                            </TableCell>
                            <TableCell>
                              <div
                                className={`px-2 py-1 rounded-full text-xs inline-block ${
                                  referral.status === "active"
                                    ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                                    : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                }`}
                              >
                                {referral.status === "active"
                                  ? "–ê–∫—Ç–∏–≤–µ–Ω"
                                  : referral.status}
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center space-x-1">
                                <Clock className="w-4 h-4 text-slate-400" />
                                <span>{formatDate(referral.createdAt)}</span>
                              </div>
                            </TableCell>
                            <TableCell>
                              {referral.managerId ? (
                                <div className="flex items-center space-x-1">
                                  <UserCog className="w-4 h-4 text-slate-400" />
                                  <TruncatedText
                                    text={
                                      managers?.find(
                                        (m) => m.id === referral.managerId
                                      )?.name ||
                                      managers?.find(
                                        (m) => m.id === referral.managerId
                                      )?.email ||
                                      `ID: ${referral.managerId}`
                                    }
                                    maxLength={20}
                                  />
                                </div>
                              ) : (
                                <span className="text-slate-400 text-sm">
                                  –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                                </span>
                              )}
                            </TableCell>
                            <TableCell className="text-center">
                              {isTransactionsLoading ? (
                                <div className="flex justify-end">
                                  <Loader2 className="w-4 h-4 animate-spin" />
                                </div>
                              ) : (
                                <div className="flex items-center justify-center space-x-1">
                                  <span className="font-semibold text-green-600 dark:text-green-400">
                                    {(
                                      ((referral.referralCommission || 0) +
                                        (referralTransactions
                                          ?.filter(
                                            (tx) =>
                                              tx.userId === referral.id &&
                                              tx.description?.includes(
                                                "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                                              )
                                          )
                                          ?.reduce(
                                            (sum, tx) =>
                                              sum +
                                              (tx.referralCommission || 0),
                                            0
                                          ) || 0)) /
                                      100
                                    ).toFixed(2)}{" "}
                                    ‚ÇΩ
                                  </span>
                                </div>
                              )}
                            </TableCell>
                            <TableCell>
                              <Select
                                value={
                                  referral.managerId
                                    ? referral.managerId.toString()
                                    : "null"
                                }
                                onValueChange={(value) => {
                                  const newManagerId =
                                    value === "null" ? null : parseInt(value);
                                  handleUpdateUserManager(
                                    referral.id,
                                    referral.managerId,
                                    newManagerId
                                  );
                                }}
                              >
                                <SelectTrigger className="w-[200px] justify-center">
                                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="null">
                                    –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                                  </SelectItem>
                                  {managers?.map((manager) => (
                                    <SelectItem
                                      key={manager.id}
                                      value={manager.id.toString()}
                                    >
                                      {manager.name ||
                                        manager.email ||
                                        `ID: ${manager.id}`}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </TableCell>
                          </TableRow>
                        ))}
                    </TableBody>
                  </Table>
                ) : (
                  <div className="py-12 text-center">
                    <Users className="mx-auto h-12 w-12 text-slate-300 mb-4" />
                    <h3 className="text-lg font-medium mb-2">
                      –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    </h3>
                    <p className="text-slate-500 mb-4 max-w-md mx-auto">
                      –ß—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π
                      —Å—Å—ã–ª–∫–æ–π —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
                    </p>
                    <a href="/referrals">
                      <Button variant="outline" asChild>
                        –ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
                      </Button>
                    </a>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* –í–∫–ª–∞–¥–∫–∞ –í—ã–ø–ª–∞—Ç—ã */}
          <TabsContent value="payments" className="mt-6">
            <Card>
              <CardHeader>
                <CardTitle>–ò—Å—Ç–æ—Ä–∏—è –≤—ã–ø–ª–∞—Ç</CardTitle>
                <CardDescription>
                  –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –æ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –≤–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                </CardDescription>
              </CardHeader>
              <CardContent>
                {isTransactionsLoading ? (
                  <div className="py-8 flex justify-center">
                    <Loader2 className="w-8 h-8 animate-spin" />
                  </div>
                ) : referralTransactions && referralTransactions.length > 0 ? (
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>–†–µ—Ñ–µ—Ä–∞–ª</TableHead>
                        <TableHead>–î–∞—Ç–∞</TableHead>
                        <TableHead>–û–ø–∏—Å–∞–Ω–∏–µ</TableHead>
                        <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                        <TableHead>–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞</TableHead>
                        <TableHead>–í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {referralTransactions
                        .filter((tx) =>
                          tx.description?.includes("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
                        )
                        .map((transaction) => (
                          <TableRow key={transaction.id}>
                            <TableCell className="font-medium">
                              <TruncatedText
                                text={
                                  allClientsData?.find(
                                    (user) => user.id === transaction.userId
                                  )?.name ||
                                  allClientsData?.find(
                                    (user) => user.id === transaction.userId
                                  )?.email ||
                                  `ID: ${transaction.userId}`
                                }
                                maxLength={20}
                              />
                            </TableCell>
                            <TableCell>
                              {formatDate(transaction.createdAt)}
                            </TableCell>
                            <TableCell>
                              {`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ ${Math.floor(
                                transaction.amount / 100
                              )} ‚ÇΩ` || "–ü–ª–∞—Ç–µ–∂ –∑–∞ —É—Å–ª—É–≥–∏"}
                            </TableCell>
                            <TableCell>
                              <div
                                className={`px-2 py-1 rounded-full text-xs inline-block ${
                                  transaction.status === "processed"
                                    ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                                    : transaction.status === "pending"
                                    ? "bg-yellow-100 text-yellow-700 dark:bg-yellow-900 dark:text-yellow-300"
                                    : "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300"
                                }`}
                              >
                                {transaction.status === "processed"
                                  ? "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
                                  : transaction.status === "pending"
                                  ? "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"
                                  : "–û—à–∏–±–∫–∞"}
                              </div>
                            </TableCell>
                            <TableCell className="text-center">
                              {Math.floor(transaction.amount / 100)} ‚ÇΩ
                            </TableCell>
                            <TableCell className="text-center font-semibold text-green-600 dark:text-green-400">
                              {Math.floor(
                                (transaction.referralCommission || 0) / 100
                              )}{" "}
                              ‚ÇΩ
                            </TableCell>
                          </TableRow>
                        ))}
                    </TableBody>
                  </Table>
                ) : (
                  <div className="py-12 text-center">
                    <BadgeDollarSign className="mx-auto h-12 w-12 text-slate-300 mb-4" />
                    <h3 className="text-lg font-medium mb-2">
                      –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–ø–ª–∞—Ç–∞—Ö
                    </h3>
                    <p className="text-slate-500 mb-4 max-w-md mx-auto">
                      –ö–æ–≥–¥–∞ –≤–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –Ω–∞—á–Ω—É—Ç –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —É—Å–ª—É–≥–∏, –≤—ã –±—É–¥–µ—Ç–µ
                      –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Å –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞.
                    </p>
                  </div>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          {/* –í–∫–ª–∞–¥–∫–∞ –°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ (–¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤) */}
          {canAccessManaged && (
            <TabsContent value="managed" className="mt-6">
              <Card>
                <CardHeader>
                  <CardTitle>–°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</CardTitle>
                  <CardDescription>
                    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç–µ –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  {isManagedUsersLoading || isUsersWithoutManagerLoading ? (
                    <div className="py-8 flex justify-center">
                      <Loader2 className="w-8 h-8 animate-spin" />
                    </div>
                  ) : (
                    <Tabs defaultValue="current" className="w-full">
                      <TabsList className="grid w-full grid-cols-2 mb-6">
                        <TabsTrigger value="current">–ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã</TabsTrigger>
                        <TabsTrigger value="available">
                          –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è
                        </TabsTrigger>
                      </TabsList>

                      {/* –í–∫–ª–∞–¥–∫–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ */}
                      <TabsContent value="current">
                        {managedUsers && managedUsers.length > 0 ? (
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                                <TableHead>Email</TableHead>
                                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                                <TableHead>–¢–∞—Ä–∏—Ñ</TableHead>
                                <TableHead>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</TableHead>
                                <TableHead className="text-right">
                                  –í–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
                                </TableHead>
                                <TableHead>–í—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {[...managedUsers]
                                .sort(
                                  (a, b) =>
                                    new Date(b.createdAt).getTime() -
                                    new Date(a.createdAt).getTime()
                                )
                                .map((managedUser) => (
                                  <TableRow key={managedUser.id}>
                                    <TableCell className="font-medium">
                                      <div className="flex items-center space-x-2">
                                        <UserCircle className="w-5 h-5 text-slate-400" />
                                        <TruncatedText
                                          text={managedUser.name || "–ù–µ—Ç –∏–º–µ–Ω–∏"}
                                          maxLength={20}
                                        />
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      <TruncatedText
                                        text={managedUser.email || ""}
                                        maxLength={25}
                                      />
                                    </TableCell>
                                    <TableCell>
                                      <div
                                        className={`px-2 py-1 rounded-full text-xs inline-block ${
                                          managedUser.status === "active"
                                            ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                                            : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                        }`}
                                      >
                                        {managedUser.status === "active"
                                          ? "–ê–∫—Ç–∏–≤–µ–Ω"
                                          : managedUser.status}
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      <div
                                        className={`px-2 py-1 rounded-full text-xs inline-block ${
                                          managedUser.plan === "enterprise"
                                            ? "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300"
                                            : managedUser.plan === "standart"
                                            ? "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300"
                                            : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                        }`}
                                      >
                                        {getRusPlan(managedUser.plan)}
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      {formatDate(managedUser.createdAt)}
                                    </TableCell>
                                    <TableCell className="text-right">
                                      {isTransactionsLoading ? (
                                        <div className="flex justify-end">
                                          <Loader2 className="w-4 h-4 animate-spin" />
                                        </div>
                                      ) : (
                                        <div className="flex items-center justify-end space-x-1">
                                          <span className="font-semibold text-green-600 dark:text-green-400">
                                            {Math.floor(
                                              (referralTransactions
                                                ?.filter(
                                                  (tx) =>
                                                    tx.userId ===
                                                      managedUser.id &&
                                                    tx.description?.includes(
                                                      "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"
                                                    )
                                                )
                                                ?.reduce(
                                                  (sum, tx) =>
                                                    sum +
                                                    (tx.managerCommission || 0),
                                                  0
                                                ) || 0) / 100
                                            )}{" "}
                                            ‚ÇΩ
                                          </span>
                                        </div>
                                      )}
                                    </TableCell>
                                    <TableCell>
                                      <Select
                                        value={
                                          managedUser.managerId
                                            ? managedUser.managerId.toString()
                                            : "null"
                                        }
                                        onValueChange={(value) => {
                                          const newManagerId =
                                            value === "null"
                                              ? null
                                              : parseInt(value);
                                          handleUpdateUserManager(
                                            managedUser.id,
                                            managedUser.managerId,
                                            newManagerId
                                          );
                                        }}
                                      >
                                        <SelectTrigger className="w-[200px]">
                                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞" />
                                        </SelectTrigger>
                                        <SelectContent>
                                          <SelectItem value="null">
                                            –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                                          </SelectItem>
                                          {managers?.map((manager) => (
                                            <SelectItem
                                              key={manager.id}
                                              value={manager.id.toString()}
                                            >
                                              {manager.name ||
                                                manager.email ||
                                                `ID: ${manager.id}`}
                                            </SelectItem>
                                          ))}
                                        </SelectContent>
                                      </Select>
                                    </TableCell>
                                  </TableRow>
                                ))}
                            </TableBody>
                          </Table>
                        ) : (
                          <div className="py-12 text-center">
                            <Users className="mx-auto h-12 w-12 text-slate-300 mb-4" />
                            <h3 className="text-lg font-medium mb-2">
                              –ù–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                            </h3>
                            <p className="text-slate-500 mb-4 max-w-md mx-auto">
                              –í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤
                              –∫–∞—á–µ—Å—Ç–≤–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.
                            </p>
                          </div>
                        )}
                      </TabsContent>

                      {/* –í–∫–ª–∞–¥–∫–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ */}
                      <TabsContent value="available">
                        {usersWithoutManager &&
                        usersWithoutManager.length > 0 ? (
                          <Table>
                            <TableHeader>
                              <TableRow>
                                <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                                <TableHead>Email</TableHead>
                                <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                                <TableHead>–¢–∞—Ä–∏—Ñ</TableHead>
                                <TableHead>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</TableHead>
                                <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                              </TableRow>
                            </TableHeader>
                            <TableBody>
                              {[...usersWithoutManager]
                                .sort(
                                  (a, b) =>
                                    new Date(b.createdAt).getTime() -
                                    new Date(a.createdAt).getTime()
                                )
                                .map((userWithoutManager) => (
                                  <TableRow key={userWithoutManager.id}>
                                    <TableCell className="font-medium">
                                      <div className="flex items-center space-x-2">
                                        <UserCircle className="w-5 h-5 text-slate-400" />
                                        <TruncatedText
                                          text={
                                            userWithoutManager.name ||
                                            "–ù–µ—Ç –∏–º–µ–Ω–∏"
                                          }
                                          maxLength={20}
                                        />
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      <TruncatedText
                                        text={userWithoutManager.email}
                                        maxLength={25}
                                      />
                                    </TableCell>
                                    <TableCell>
                                      <div
                                        className={`px-2 py-1 rounded-full text-xs inline-block ${
                                          userWithoutManager.status === "active"
                                            ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                                            : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                        }`}
                                      >
                                        {userWithoutManager.status === "active"
                                          ? "–ê–∫—Ç–∏–≤–µ–Ω"
                                          : userWithoutManager.status}
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      <div
                                        className={`px-2 py-1 rounded-full text-xs inline-block ${
                                          userWithoutManager.plan ===
                                          "enterprise"
                                            ? "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300"
                                            : userWithoutManager.plan ===
                                              "standart"
                                            ? "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300"
                                            : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                        }`}
                                      >
                                        {getRusPlan(userWithoutManager.plan)}
                                      </div>
                                    </TableCell>
                                    <TableCell>
                                      {formatDate(userWithoutManager.createdAt)}
                                    </TableCell>
                                    <TableCell>
                                      <Button
                                        size="sm"
                                        onClick={() =>
                                          handleUpdateUserManager(
                                            userWithoutManager.id,
                                            null,
                                            user?.id
                                          )
                                        }
                                      >
                                        –í–∑—è—Ç—å –Ω–∞ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ
                                      </Button>
                                    </TableCell>
                                  </TableRow>
                                ))}
                            </TableBody>
                          </Table>
                        ) : (
                          <div className="py-12 text-center">
                            <Users className="mx-auto h-12 w-12 text-slate-300 mb-4" />
                            <h3 className="text-lg font-medium mb-2">
                              –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                            </h3>
                            <p className="text-slate-500 mb-4 max-w-md mx-auto">
                              –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤.
                            </p>
                          </div>
                        )}
                      </TabsContent>
                    </Tabs>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}

          {/* –í–∫–ª–∞–¥–∫–∞ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤) */}
          {canAccessAllUsers && (
            <TabsContent value="all-users" className="mt-6">
              <Card>
                <CardHeader className="flex flex-col md:flex-row md:items-center md:justify-between">
                  <div>
                    <CardTitle>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</CardTitle>
                    <CardDescription>
                      –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å–∏—Å—Ç–µ–º—ã
                    </CardDescription>
                  </div>
                  <div className="mt-4 md:mt-0 flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      className="flex items-center gap-1"
                      onClick={() => setFilterDialogOpen(true)}
                    >
                      <Filter className="w-4 h-4 mr-1" />
                      –§–∏–ª—å—Ç—Ä—ã
                      {(nameFilter ||
                        emailFilter ||
                        roleFilter ||
                        planFilter) && (
                        <div className="w-2 h-2 rounded-full bg-blue-500 ml-2"></div>
                      )}
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  {isAllUsersLoading ? (
                    <div className="py-8 flex justify-center">
                      <Loader2 className="w-8 h-8 animate-spin" />
                    </div>
                  ) : allUsers && allUsers.length > 0 ? (
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>ID</TableHead>
                          <TableHead>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</TableHead>
                          <TableHead>Email</TableHead>
                          <TableHead>–¢–µ–ª–µ—Ñ–æ–Ω</TableHead>
                          <TableHead>–†–æ–ª—å</TableHead>
                          <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
                          <TableHead>–¢–∞—Ä–∏—Ñ</TableHead>
                          <TableHead>–ú–µ–Ω–µ–¥–∂–µ—Ä</TableHead>
                          <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {getFilteredUsers().map((userItem) => (
                          <TableRow key={userItem.id}>
                            <TableCell>{userItem.id}</TableCell>
                            <TableCell className="font-medium">
                              <TruncatedText
                                text={userItem.name || "–ë–µ–∑ –∏–º–µ–Ω–∏"}
                                maxLength={20}
                              />
                            </TableCell>
                            <TableCell>
                              <TruncatedText
                                text={userItem.email}
                                maxLength={25}
                              />
                            </TableCell>
                            <TableCell>
                              <TruncatedText
                                text={userItem.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}
                                maxLength={15}
                              />
                            </TableCell>
                            <TableCell>
                              <div
                                className={`px-2 py-1 rounded-full text-xs inline-block ${
                                  userItem.role === "admin"
                                    ? "bg-red-100 text-red-700 dark:bg-red-900 dark:text-red-300"
                                    : userItem.role === "manager"
                                    ? "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300"
                                    : userItem.role === "referral"
                                    ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                                    : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                }`}
                              >
                                {getRusRole(userItem.role)}
                              </div>
                            </TableCell>
                            <TableCell>
                              <div
                                className={`px-2 py-1 rounded-full text-xs inline-block ${
                                  userItem.status === "active"
                                    ? "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300"
                                    : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                }`}
                              >
                                {userItem.status}
                              </div>
                            </TableCell>
                            <TableCell>
                              <div
                                className={`px-2 py-1 rounded-full text-xs inline-block ${
                                  userItem.plan === "enterprise"
                                    ? "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300"
                                    : userItem.plan === "standart"
                                    ? "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300"
                                    : "bg-slate-100 text-slate-700 dark:bg-slate-800 dark:text-slate-300"
                                }`}
                              >
                                {getRusPlan(userItem.plan)}
                              </div>
                            </TableCell>
                            <TableCell>
                              <Select
                                value={
                                  userItem.managerId
                                    ? userItem.managerId.toString()
                                    : "null"
                                }
                                onValueChange={(value) => {
                                  const newManagerId =
                                    value === "null" ? null : parseInt(value);
                                  handleUpdateUserManager(
                                    userItem.id,
                                    userItem.managerId,
                                    newManagerId
                                  );
                                }}
                              >
                                <SelectTrigger className="w-[200px]">
                                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞" />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="null">
                                    –ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
                                  </SelectItem>
                                  {managers?.map((manager) => (
                                    <SelectItem
                                      key={manager.id}
                                      value={manager.id.toString()}
                                    >
                                      {manager.name ||
                                        manager.email ||
                                        `ID: ${manager.id}`}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                            </TableCell>
                            <TableCell>
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={() => handleEditUser(userItem)}
                              >
                                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                              </Button>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  ) : (
                    <div className="py-12 text-center">
                      <Users className="mx-auto h-12 w-12 text-slate-300 mb-4" />
                      <h3 className="text-lg font-medium mb-2">
                        –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                      </h3>
                      <p className="text-slate-500 mb-4 max-w-md mx-auto">
                        –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                      </p>
                    </div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          )}
        </Tabs>
      </div>

      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö */}
      <div className={isDesktop ? "hidden" : "block"}>
        <MobileTeamPage
          referrals={referrals}
          isReferralsLoading={isReferralsLoading}
          referralTransactions={referralTransactions}
          isTransactionsLoading={isTransactionsLoading}
          canAccessManaged={canAccessManaged}
          canAccessAllUsers={canAccessAllUsers}
          managedUsers={managedUsers}
          isManagedUsersLoading={isManagedUsersLoading}
          allUsers={allUsers}
          isAllUsersLoading={isAllUsersLoading}
          allClientsData={allClientsData}
          managers={managers}
          currentUser={user as User | null}
          usersWithoutManager={usersWithoutManager}
          isUsersWithoutManagerLoading={isUsersWithoutManagerLoading}
          formatDate={formatDate}
          getFilteredUsers={getFilteredUsers}
          handleEditUser={handleEditUser}
          handleUpdateUserManager={handleUpdateUserManager}
          setParentActiveTab={setActiveTab}
          parentActiveTab={activeTab}
          refetchManagedUsers={refetchManagedUsers}
          setFilterDialogOpen={setFilterDialogOpen}
          hasActiveFilters={
            !!(nameFilter || emailFilter || roleFilter || planFilter)
          }
        />
      </div>

      {/* –î–∏–∞–ª–æ–≥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
      <Dialog open={userDialogOpen} onOpenChange={setUserDialogOpen}>
        <DialogContent className="sm:max-w-[500px] max-h-[80vh] overflow-y-auto w-[90%] md:w-auto">
          <DialogHeader>
            <DialogTitle>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</DialogTitle>
            <DialogDescription>
              –ò–∑–º–µ–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
              –∏–∑–º–µ–Ω–µ–Ω–∏–π.
            </DialogDescription>
          </DialogHeader>

          {editingUser && (
            <UserForm
              user={editingUser}
              onSubmit={handleUserFormSubmit}
              onCancel={handleCloseUserDialog}
            />
          )}
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
      <Dialog open={filterDialogOpen} onOpenChange={setFilterDialogOpen}>
        <DialogContent className="sm:max-w-[500px] max-h-[80vh] overflow-y-auto w-[90%] md:w-auto">
          <DialogHeader>
            <DialogTitle>–§–∏–ª—å—Ç—Ä—ã</DialogTitle>
            <DialogDescription>
              –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            </DialogDescription>
          </DialogHeader>

          <div className="space-y-3 py-2">
            <div className="space-y-1">
              <label htmlFor="name-filter" className="text-sm font-medium">
                –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
              </label>
              <input
                id="name-filter"
                className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                value={nameFilter}
                onChange={(e) => setNameFilter(e.target.value)}
              />
            </div>

            <div className="space-y-1">
              <label htmlFor="email-filter" className="text-sm font-medium">
                Email
              </label>
              <input
                id="email-filter"
                className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
                placeholder="–í–≤–µ–¥–∏—Ç–µ email"
                value={emailFilter}
                onChange={(e) => setEmailFilter(e.target.value)}
              />
            </div>

            <div className="space-y-1">
              <label htmlFor="role-filter" className="text-sm font-medium">
                –†–æ–ª—å
              </label>
              <Select value={roleFilter} onValueChange={setRoleFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ —Ä–æ–ª–∏</SelectItem>
                  <SelectItem value="admin">Admin</SelectItem>
                  <SelectItem value="manager">Manager</SelectItem>
                  <SelectItem value="referral">Referral</SelectItem>
                  <SelectItem value="user">User</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-1">
              <label htmlFor="plan-filter" className="text-sm font-medium">
                –¢–∞—Ä–∏—Ñ
              </label>
              <Select value={planFilter} onValueChange={setPlanFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ —Ç–∞—Ä–∏—Ñ—ã</SelectItem>
                  <SelectItem value="free">Free</SelectItem>
                  <SelectItem value="basic">Basic</SelectItem>
                  <SelectItem value="enterprise">Enterprise</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <DialogFooter className="flex justify-between mt-3 gap-3">
            <Button variant="outline" onClick={resetFilters} size="sm">
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
            <Button onClick={() => setFilterDialogOpen(false)} size="sm">
              –ü—Ä–∏–º–µ–Ω–∏—Ç—å
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Dialog for instructions */}
      <TeamInstructionsDialog
        open={instructionsDialogOpen}
        onOpenChange={setInstructionsDialogOpen}
        userRole={user?.role}
      />
    </div>
  );
}

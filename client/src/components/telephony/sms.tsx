import { useState, useRef } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, Send, Plus, X } from "lucide-react";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { useFetchConnectedNumber } from "@/hooks/telephony/use-fetch-connected-number";
import { toast } from "@/hooks/use-toast";
import { TariffActivationBanner } from "@/components/telephony/tariff-activation-banner";
import { CallingNumbers } from "@/components/telephony/calling-numbers";
import { User } from "@/hooks/telephony/type";
import { PhoneNumberSelector } from "./phone-number-selector";

export function Sms({ user }: { user: User }) {
  const [selectedPhoneNumber, setSelectedPhoneNumber] = useState<string>("");
  const [messageText, setMessageText] = useState<string>("");
  const [recipientNumbers, setRecipientNumbers] = useState<string[]>([]);
  const [isSending, setIsSending] = useState<boolean>(false);

  // Ref –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ—Ç–æ–¥–∞–º CallingNumbers
  const callingNumbersRef = useRef<{
    getPhoneNumbers: () => string[];
    clearPhoneNumbers: () => void;
  }>(null);

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤
  const {
    data: connectedNumbers,
    isLoading: isLoadingNumbers,
    isError: isNumbersError,
    refetch: refetchNumbers,
  } = useFetchConnectedNumber({
    userId: user.id,
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
  const handleNumbersChange = (numbers: string[]) => {
    setRecipientNumbers(numbers);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SMS
  const calculateSmsCount = (text: string): number => {
    if (!text.trim()) return 0;
    return Math.ceil(text.length / 70);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
  const calculateTotalCost = (text: string, phoneNumbers: string[]): number => {
    const smsCount = calculateSmsCount(text);
    const pricePerSms = 5.0; // –¶–µ–Ω–∞ –∑–∞ –æ–¥–Ω–æ SMS –≤ —Ä—É–±–ª—è—Ö
    return smsCount * pricePerSms * phoneNumbers.length;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
  const sendSMS = async () => {
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    const currentNumbers = callingNumbersRef.current?.getPhoneNumbers() || [];

    if (!selectedPhoneNumber) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
        variant: "destructive",
      });
      return;
    }

    if (!messageText.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
        variant: "destructive",
      });
      return;
    }

    if (currentNumbers.length === 0) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
        variant: "destructive",
      });
      return;
    }

    setIsSending(true);

    try {
      const response = await fetch("/api/telephony/send-sms", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          srcNumber: selectedPhoneNumber,
          dstNumbers: currentNumbers,
          text: messageText.trim(),
        }),
      });

      const result = await response.json();

      if (response.ok && result.success) {
        toast({
          title: "–£—Å–ø–µ—Ö",
          description: `SMS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${currentNumbers.length} –Ω–æ–º–µ—Ä–æ–≤. –£—Å–ø–µ—à–Ω–æ: ${result.successCount}, –æ—à–∏–±–æ–∫: ${result.failedCount}`,
        });

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        setMessageText("");
        callingNumbersRef.current?.clearPhoneNumbers();
      } else {
        throw new Error(result.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS");
      }
    } catch (error: any) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS",
        variant: "destructive",
      });
    } finally {
      setIsSending(false);
    }
  };

  // –ï—Å–ª–∏ –ø–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Free –∏–ª–∏ Basic, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–Ω–Ω–µ—Ä
  if (user?.plan === "free" || user?.plan === "basic") {
    return <TariffActivationBanner />;
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>SMS —Ä–∞—Å—Å—ã–ª–∫–∞</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-6">
          {/* –í—ã–±–æ—Ä –Ω–æ–º–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è */}
          <PhoneNumberSelector
            selectedPhoneNumber={selectedPhoneNumber}
            onPhoneNumberChange={setSelectedPhoneNumber}
            connectedNumbers={connectedNumbers || []}
            isLoadingNumbers={isLoadingNumbers}
            isNumbersError={isNumbersError}
            refetchNumbers={refetchNumbers}
            title="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS"
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π SMS"
            smsOnly={true}
          />

          {/* –§–æ—Ä–º–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ */}
          {selectedPhoneNumber && (
            <div className="space-y-6 border border-neutral-200 dark:border-neutral-700 rounded-md p-4">
              {/* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π */}
              <div className="space-y-2">
                <CallingNumbers
                  ref={callingNumbersRef}
                  onNumbersChange={handleNumbersChange}
                  userBalance={(user?.balance || 0) / 100}
                  totalCost={0} // –î–ª—è SMS –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤
                  mode="sms"
                />
              </div>

              {/* –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è */}
              <div className="space-y-2">
                <h3 className="text-sm font-medium text-neutral-700 dark:text-neutral-300">
                  –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                </h3>
                <Textarea
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç SMS —Å–æ–æ–±—â–µ–Ω–∏—è"
                  value={messageText}
                  onChange={(e) => setMessageText(e.target.value)}
                  rows={4}
                  className="resize-none"
                  maxLength={700}
                />
                <div className="flex justify-between">
                  <p className="text-xs text-neutral-500">
                    –ú–∞–∫—Å–∏–º—É–º 700 —Å–∏–º–≤–æ–ª–æ–≤
                  </p>
                  <p className="text-xs text-neutral-500">
                    {messageText.length}/700
                  </p>
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ SMS */}
                <div className="mt-2 p-2 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-md">
                  <div className="flex justify-between items-center text-sm text-blue-700 dark:text-blue-300">
                    <span>üì± –û–¥–Ω–æ SMS –≤–º–µ—â–∞–µ—Ç 70 —Å–∏–º–≤–æ–ª–æ–≤</span>
                    <span className="font-medium">
                      {calculateSmsCount(messageText)} SMS
                      {calculateSmsCount(messageText) > 1
                        ? " (–æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥–∞—è –æ—Ç–¥–µ–ª—å–Ω–æ)"
                        : ""}
                    </span>
                  </div>
                  {messageText.length > 70 && (
                    <p className="text-xs text-blue-600 dark:text-blue-400 mt-1">
                      –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–¥–µ–ª–µ–Ω–æ –Ω–∞{" "}
                      {calculateSmsCount(messageText)} SMS
                    </p>
                  )}
                  {/* –†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ */}
                  {recipientNumbers.length > 0 && messageText.trim() && (
                    <div className="mt-2 pt-2 border-t border-blue-200 dark:border-blue-700">
                      <div className="text-sm text-blue-700 dark:text-blue-300">
                        <div className="flex justify-between">
                          <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ SMS –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:</span>
                          <span className="font-medium">
                            {calculateSmsCount(messageText)}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:</span>
                          <span className="font-medium">
                            {recipientNumbers.length}
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span>–¶–µ–Ω–∞ –∑–∞ SMS:</span>
                          <span className="font-medium">5 ‚ÇΩ</span>
                        </div>
                        <div className="flex justify-between font-medium">
                          <span>–†–∞—Å—á–µ—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                          <span>
                            {calculateTotalCost(
                              messageText,
                              recipientNumbers
                            ).toFixed(2)}{" "}
                            ‚ÇΩ
                          </span>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
              <div className="flex justify-end">
                <Button
                  onClick={sendSMS}
                  disabled={
                    isSending ||
                    !selectedPhoneNumber ||
                    !messageText.trim() ||
                    (callingNumbersRef.current?.getPhoneNumbers()?.length ||
                      0) === 0
                  }
                  className="min-w-[120px]"
                >
                  {isSending ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      –û—Ç–ø—Ä–∞–≤–∫–∞...
                    </>
                  ) : (
                    <>
                      <Send className="mr-2 h-4 w-4" />
                      –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS
                    </>
                  )}
                </Button>
              </div>

              {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö */}
              <div className="text-xs text-neutral-500 border-t pt-4 mt-2">
                <p className="font-medium mb-1">
                  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS:
                </p>
                <ul className="list-disc pl-5 space-y-1">
                  <li
                    className={
                      selectedPhoneNumber ? "text-green-500" : "text-red-500"
                    }
                  >
                    –í—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS
                  </li>
                  <li
                    className={
                      (callingNumbersRef.current?.getPhoneNumbers()?.length ||
                        0) > 0
                        ? "text-green-500"
                        : "text-red-500"
                    }
                  >
                    –î–æ–±–∞–≤–ª–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                  </li>
                  <li
                    className={
                      messageText.trim() ? "text-green-500" : "text-red-500"
                    }
                  >
                    –¢–µ–∫—Å—Ç SMS –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
                  </li>
                  <li className="text-green-500">
                    –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
                  </li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
}

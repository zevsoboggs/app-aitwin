/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram Bot API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ã –∏ —á–∞—Ç—ã
 */

export class TelegramService {
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
   * @param botToken –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
   * @param chatId ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
   * @param text –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  async sendMessage(
    botToken: string,
    chatId: string | number, 
    text: string, 
    options: {
      disable_web_page_preview?: boolean;
      parse_mode?: 'Markdown' | 'HTML';
    } = {}
  ): Promise<any> {
    console.log(`[Telegram] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}`);
    console.log(`[Telegram] –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${text.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`[Telegram] –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤): ${botToken ? botToken.substring(0, 10) + '...' : '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
    
    if (!botToken) {
      console.error('[Telegram] –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram');
      throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram');
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ ID —á–∞—Ç–∞ (–∏–Ω–æ–≥–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—é—Ç —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "@" –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
    let cleanChatId = String(chatId).trim();
    if (cleanChatId.startsWith('@')) {
      console.log(`[Telegram] ID —á–∞—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å`);
    } else if (!/^-?\d+$/.test(cleanChatId) && !cleanChatId.startsWith('@')) {
      console.log(`[Telegram] ID —á–∞—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º`);
    }
    
    try {
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
      
      const params = {
        chat_id: cleanChatId,
        text,
        disable_web_page_preview: options.disable_web_page_preview ?? false,
        parse_mode: options.parse_mode
      };
      
      console.log(`[Telegram] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: ${url}`);
      console.log(`[Telegram] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify({
        chat_id: cleanChatId,
        text: text.length > 100 ? text.substring(0, 100) + '...' : text,
        disable_web_page_preview: options.disable_web_page_preview,
        parse_mode: options.parse_mode
      })}`);
      
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(params)
      });
      
      console.log(`[Telegram] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º: ${response.status}`);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error(`[Telegram] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${response.status} ${errorText}`);
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ Telegram API
        try {
          const errorJson = JSON.parse(errorText);
          if (errorJson.description) {
            console.error(`[Telegram] –û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ API: ${errorJson.description}`);
            
            // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if (errorJson.description.includes("chat not found")) {
              console.error(`[Telegram] ‚ö†Ô∏è –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç/–≥—Ä—É–ø–ø—É –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.`);
            } else if (errorJson.description.includes("bot was blocked")) {
              console.error(`[Telegram] ‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.`);
            } else if (errorJson.description.includes("invalid token")) {
              console.error(`[Telegram] ‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∫–∞–Ω–∞–ª–∞.`);
            }
          }
        } catch (parseError) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        }
        
        throw new Error(`–û—à–∏–±–∫–∞ API Telegram: ${response.status} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log(`[Telegram] –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`, result);
      return result;
    } catch (error) {
      console.error('[Telegram] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–µ—Ç–∞–ª–µ–π –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (error instanceof Error) {
        console.error('[Telegram] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error.message);
        console.error('[Telegram] –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error.stack);
      }
      throw error;
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
   * @param botToken –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
   * @param chatId ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
   * @param toolCall –î–∞–Ω–Ω—ã–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
   * @param toolName –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param toolArgs –ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @param notificationChannelId ID –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async sendToolCallMessage(
    botToken: string,
    chatId: string | number,
    toolCall: any,
    toolName?: string,
    toolArgs?: string,
    notificationChannelId?: number
  ): Promise<any> {
    console.log(`[Telegram] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —á–∞—Ç ${chatId}`);
    
    let data: any = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if (toolArgs) {
      try {
        data = JSON.parse(toolArgs);
      } catch (e) {
        data = toolArgs;
      }
    } else if (toolCall?.function?.arguments) {
      try {
        data = JSON.parse(toolCall.function.arguments);
      } catch (e) {
        data = toolCall.function.arguments;
      }
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    let messageText = '';
    if (typeof data === 'object' && data !== null) {
      for (const [key, value] of Object.entries(data)) {
        messageText += `üìå ${key}: ${value}\n`;
      }
    } else {
      messageText = String(data);
    }

    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    if (!messageText.trim()) {
      messageText = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    }

    return this.sendMessage(botToken, chatId, messageText);
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
   * @param botToken –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
   * @param chatId ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞
   * @param toolName –ò–º—è —Ñ—É–Ω–∫—Ü–∏–∏
   * @param toolResult –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
   * @param notificationChannelId ID –∫–∞–Ω–∞–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  async sendToolResultMessage(
    botToken: string,
    chatId: string | number,
    toolName: string,
    toolResult: any,
    notificationChannelId?: number
  ): Promise<any> {
    console.log(`[Telegram] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —á–∞—Ç ${chatId}`);
    
    let messageText = '';
    
    if (typeof toolResult === 'string') {
      try {
        const parsed = JSON.parse(toolResult);
        if (typeof parsed === 'object' && parsed !== null) {
          for (const [key, value] of Object.entries(parsed)) {
            messageText += `üìå ${key}: ${value}\n`;
          }
        } else {
          messageText = toolResult;
        }
      } catch (e) {
        messageText = toolResult;
      }
    } else if (toolResult === null || toolResult === undefined) {
      messageText = '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';
    } else if (typeof toolResult === 'object') {
      for (const [key, value] of Object.entries(toolResult)) {
        messageText += `üìå ${key}: ${value}\n`;
      }
    } else {
      messageText = String(toolResult);
    }
    
    return this.sendMessage(botToken, chatId, messageText);
  }
  
  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
   * @param value –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private formatArgValue(value: any): string {
    if (value === null || value === undefined) {
      return '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    }
    
    if (typeof value === 'object') {
      try {
        return JSON.stringify(value);
      } catch (e) {
        return '—Å–ª–æ–∂–Ω—ã–π –æ–±—ä–µ–∫—Ç';
      }
    }
    
    return String(value);
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç/–∫–∞–Ω–∞–ª
   * @param botToken –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
   * @param chatId ID —á–∞—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   */
  async testConnection(botToken: string, chatId: string | number): Promise<boolean> {
    try {
      const message = '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.';
      const result = await this.sendMessage(botToken, chatId, message, { disable_web_page_preview: true });
      return !!result && !!result.ok;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram:', error);
      return false;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export const telegramService = new TelegramService();